import { useEffect, useRef, useState } from "react";

export const useDrawStarMission = (width, height, backgroundImage, onComplete) => {
  const canvasRef = useRef(null);
  const bgRef = useRef(null);
  const [starPoints, setStarPoints] = useState([]);
  const [visited, setVisited] = useState([]);
  const [drawPath, setDrawPath] = useState([]);
  const [progress, setProgress] = useState(0);
  const [currentFingerPos, setCurrentFingerPos] = useState(null);
  const [started, setStarted] = useState(false); // 1Î≤à Ï†êÏóê ÎèÑÎã¨ÌñàÎäîÏßÄ Ïó¨Î∂ÄÎ∂Ä
  const completedRef = useRef(false); // ÎØ∏ÏÖò ÏÑ±Í≥µ Ïó¨Î∂Ä

  // Î≥Ñ Íº≠ÏßìÏ†ê ÏÉùÏÑ± Ìï®ÏàòÏàò
  const makeStarPoints = (cx, cy, outerR, innerR, numPoints = 5) => {
    const points = [];
    const step = Math.PI / numPoints;
    for (let i = 0; i < 2 * numPoints; i++) {
      const r = i % 2 === 0 ? outerR : innerR;
      const angle = i * step - Math.PI / 2;
      points.push({ x: cx + r * Math.cos(angle), y: cy + r * Math.sin(angle) });
    }
    points.push(points[0]); // ÎßàÏßÄÎßâ Ï†êÏùÄ Îã´Í∏∞Ïö©
    return points;
  };

  // Î≥ÑÏ†ê ÏÑ∏ÌåÖÌåÖ
  useEffect(() => {
    const points = makeStarPoints(width / 2, height / 2, 120, 50);
    setStarPoints(points);
    setVisited(new Array(points.length).fill(false));
  }, [width, height]);


  // Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ Î°úÎìúÎìú
  useEffect(() => {
    const img = new Image();
    img.src = backgroundImage;
    img.onload = () => {
      bgRef.current = img;
      drawCanvas();
    };
  }, [backgroundImage]);

  const isNear = (p1, p2, threshold = 30) => {
    const dx = p1.x - p2.x;
    const dy = p1.y - p2.y;
    return dx * dx + dy * dy <= threshold * threshold;
  };


  // ÏÇ¨Ïö©Ïûê ÏÜêÍ∞ÄÎùΩ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏
  const updateDrawing = (tip, isDrawing) => {
    setCurrentFingerPos(tip);

    // ‚úã ÎØ∏ÏÖò ÏÑ±Í≥µ ÌõÑÏóêÎäî Îçî Ïù¥ÏÉÅ Í∑∏Î¶¨ÏßÄ ÏïäÏùå
    if (completedRef.current) return;

    // ‚úã ÏïÑÏßÅ 1Î≤à Ï†êÏóê ÎèÑÎã¨ÌïòÏßÄ ÏïäÏïòÎã§Î©¥ Î¨¥Ïãú
    if (!started && isNear(tip, starPoints[0])) {
      setStarted(true); // ÏãúÏûëÏ†ê ÎèÑÎã¨ Ïãú ÏãúÏûë ÌëúÏãú
    }

    if (!started || !isDrawing) return;

    setDrawPath((prev) => [...prev, tip]);

    setVisited((prev) => {
      const updated = [...prev];

      starPoints.forEach((point, i) => {
        if (!updated[i] && isNear(tip, point)) {
          updated[i] = true;
        }
      });

      // ÎØ∏ÏÖò ÏÑ±Í≥µ Ï°∞Í±¥:
      // 1. 1Î≤à Ï†êÏóêÏÑú ÏãúÏûëÌñàÍ≥†
      // 2. 2~10Î≤à Íº≠ÏßìÏ†ê Îã§ Îì§Î†ÄÍ≥†
      // 3. ÌòÑÏû¨ ÏÜêÍ∞ÄÎùΩÏù¥ 1Î≤à Ï†ê Í∑ºÏ≤òÎ°ú Îã§Ïãú ÏôîÏùÑ Îïå
      const totalPoints = starPoints.length - 1;
      const allOthersVisited = updated.slice(1, totalPoints).every(Boolean);
      const backToStart = isNear(tip, starPoints[0]);

      // üéØ ÏÑ±Í≥µ Ï°∞Í±¥: 1Î≤àÏóêÏÑú ÏãúÏûë + 2~10Î≤à Î™®Îëê Î∞©Î¨∏ + Îã§Ïãú 1Î≤àÏúºÎ°ú
      if (started && allOthersVisited && backToStart && !completedRef.current) {
        completedRef.current = true;
        setProgress(100);
        onComplete?.();
      }

      return updated;
    });
  };

  // ÏßÑÌñâÎ•† Í≥ÑÏÇ∞
  useEffect(() => {
    const totalPoints = starPoints.length - 1;
    const allOthersVisited = visited.slice(1, totalPoints).every(Boolean);
    const backToStart = currentFingerPos && isNear(currentFingerPos, starPoints[0]);

    if (started && allOthersVisited && backToStart && !completedRef.current) {
      setProgress(100); // ÏÑ±Í≥µ ÏãúÎßå 100%
    } else if (!completedRef.current && started) {
      const count = visited.slice(1, totalPoints).filter(Boolean).length;
      const progressValue = Math.min(Math.round((count / (totalPoints - 1)) * 100), 99);
      setProgress(progressValue);
    }
  }, [visited, currentFingerPos]);

  // üñå Ï∫îÎ≤ÑÏä§ Í∑∏Î¶¨Í∏∞
  const drawCanvas = () => {
    const canvas = canvasRef.current;
    const ctx = canvas?.getContext("2d");
    if (!ctx || !bgRef.current) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.save();
    ctx.translate(width, 0); // Ï¢åÏö∞ Î∞òÏ†Ñ
    ctx.scale(-1, 1);

    // üì∑ Î∞∞Í≤Ω
    ctx.drawImage(bgRef.current, 0, 0, width, height);

    // ‚úÖ Ìï≠ÏÉÅ ÌöåÏÉâ Î≥Ñ ÏÑ† Î®ºÏ†Ä Í∑∏Î¶º (ÏÑ±Í≥µ Ïó¨Î∂ÄÏôÄ Í¥ÄÍ≥Ñ ÏóÜÏùå)
    if (starPoints.length > 1) {
      ctx.beginPath();
      ctx.strokeStyle = "rgba(180, 180, 180, 0.5)";
      ctx.lineWidth = 2;
      ctx.moveTo(starPoints[0].x, starPoints[0].y);
      for (let i = 1; i < starPoints.length; i++) {
        ctx.lineTo(starPoints[i].x, starPoints[i].y);
      }
      ctx.stroke();
    }

    // ‚ú® Ï†ïÏãù Í∞ÄÏù¥Îìú ÎùºÏù∏ Î≥Ñ (ÏÑ±Í≥µ ÏãúÎßå ÌëúÏãú)
    if (completedRef.current && starPoints.length > 1) {
      ctx.beginPath();
      ctx.strokeStyle = "gold";
      ctx.lineWidth = 4;
      ctx.moveTo(starPoints[0].x, starPoints[0].y);
      for (let i = 1; i < starPoints.length; i++) {
        ctx.lineTo(starPoints[i].x, starPoints[i].y);
      }
      ctx.stroke();
    }

    // ‚úçÔ∏è ÏÇ¨Ïö©Ïûê Í∑∏Î¶∞ ÏÑ† (ÎØ∏ÏÖò Ï§ëÏùº ÎïåÎßå)
    if (!completedRef.current && drawPath.length > 1) {
      ctx.beginPath();
      ctx.strokeStyle = "yellow";
      ctx.lineWidth = 3;
      ctx.moveTo(drawPath[0].x, drawPath[0].y);
      for (let i = 1; i < drawPath.length; i++) {
        ctx.lineTo(drawPath[i].x, drawPath[i].y);
      }
      ctx.stroke();
    }

    // üü¢ Î≥Ñ Íº≠ÏßìÏ†ê
    starPoints.forEach((p, i) => {
      ctx.beginPath();
      ctx.arc(p.x, p.y, 6, 0, 2 * Math.PI);
      ctx.fillStyle = visited[i] ? "#00ff00" : "gray";
      ctx.fill();
    });

    // üîµ ÏÜêÍ∞ÄÎùΩ ÏúÑÏπò
    if (currentFingerPos) {
      ctx.beginPath();
      ctx.arc(currentFingerPos.x, currentFingerPos.y, 5, 0, 2 * Math.PI);
      ctx.fillStyle = "#00bfff";
      ctx.fill();
    }

    ctx.restore();
  };

  return {
    canvasRef,
    drawCanvas,
    updateDrawing,
    progress,
    starPoints,
  };
};